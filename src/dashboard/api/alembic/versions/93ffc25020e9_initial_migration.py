"""Initial migration

Revision ID: 93ffc25020e9
Revises: 
Create Date: 2023-06-25 11:51:32.278604

"""
from alembic import op
import sqlalchemy as sa
import geoalchemy2


# revision identifiers, used by Alembic.
revision = '93ffc25020e9'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('Countries',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ics_table_id', sa.Integer(), nullable=True),
    sa.Column('country', sa.String(length=3), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_countries_id', 'Countries', ['id'], unique=True)
    op.create_table('Funder',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ics_table_id', sa.Integer(), nullable=False),
    sa.Column('funder', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id', 'ics_table_id')
    )
    op.create_index('idx_funder_id', 'Funder', ['id'], unique=True)
    op.create_table('ICS',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ukprn', sa.Integer(), nullable=True),
    sa.Column('postcode', sa.String(length=8), nullable=True),
    sa.Column('ics_id', sa.String(), nullable=True),
    sa.Column('uoa', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_ics_id_ics_id', 'ICS', ['id', 'ics_id'], unique=False)
    op.create_table('Institution',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ukprn', sa.Integer(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('postcode', sa.String(length=8), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('PostCodeGeom',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('cat', sa.Integer(), nullable=True),
    sa.Column('pc_area', sa.String(length=5), nullable=True),
    sa.Column('geometry', geoalchemy2.types.Geometry(geometry_type='MULTIPOLYGON', from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    #op.create_index('idx_PostCodeGeom_geometry', 'PostCodeGeom', ['geometry'], unique=False, postgresql_using='gist')
    op.create_index('idx_postcodegeom_id', 'PostCodeGeom', ['id', 'pc_area'], unique=False)
    op.create_table('Topic_weights',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ics_id', sa.String(), nullable=True),
    sa.Column('topic_id', sa.Integer(), nullable=True),
    sa.Column('probability', sa.Float(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_topic_weights_id', 'Topic_weights', ['id'], unique=True)
    op.create_table('Topics',
    sa.Column('topic_id', sa.Integer(), nullable=False),
    sa.Column('topic_name', sa.String(length=20), nullable=True),
    sa.Column('topic_group', sa.String(length=20), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('narrative', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('topic_id')
    )
    op.create_index('idx_topics_id', 'Topics', ['topic_id'], unique=True)
    op.create_table('UOA',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uoa_id', sa.String(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_uoa_id', 'UOA', ['id'], unique=True)
    op.create_table('WorldGeometry',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('iso_a3', sa.String(length=3), nullable=True),
    sa.Column('iso', sa.Integer(), nullable=True),
    sa.Column('country', sa.String(length=100), nullable=True),
    sa.Column('geometry', geoalchemy2.types.Geometry(geometry_type='MULTIPOLYGON', from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    #op.create_index('idx_WorldGeometry_geometry', 'WorldGeometry', ['geometry'], unique=False, postgresql_using='gist')
    op.create_index('idx_worldgeom_id', 'WorldGeometry', ['id', 'iso_a3'], unique=False)
    # op.drop_table('layer')
    # op.drop_table('topology')
    # op.drop_table('spatial_ref_sys')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # op.create_table('spatial_ref_sys',
    # sa.Column('srid', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('auth_name', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    # sa.Column('auth_srid', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('srtext', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    # sa.Column('proj4text', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    # sa.CheckConstraint('srid > 0 AND srid <= 998999', name='spatial_ref_sys_srid_check'),
    # sa.PrimaryKeyConstraint('srid', name='spatial_ref_sys_pkey')
    # )
    # op.create_table('topology',
    # sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('topology_id_seq'::regclass)"), autoincrement=True, nullable=False),
    # sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    # sa.Column('srid', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('precision', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    # sa.Column('hasz', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    # sa.PrimaryKeyConstraint('id', name='topology_pkey'),
    # sa.UniqueConstraint('name', name='topology_name_key'),
    # postgresql_ignore_search_path=False
    # )
    # op.create_table('layer',
    # sa.Column('topology_id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('layer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('schema_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    # sa.Column('table_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    # sa.Column('feature_column', sa.VARCHAR(), autoincrement=False, nullable=False),
    # sa.Column('feature_type', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('level', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    # sa.Column('child_id', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.ForeignKeyConstraint(['topology_id'], ['topology.id'], name='layer_topology_id_fkey'),
    # sa.PrimaryKeyConstraint('topology_id', 'layer_id', name='layer_pkey'),
    # sa.UniqueConstraint('schema_name', 'table_name', 'feature_column', name='layer_schema_name_table_name_feature_column_key')
    # )
    op.drop_index('idx_worldgeom_id', table_name='WorldGeometry')
    #op.drop_index('idx_WorldGeometry_geometry', table_name='WorldGeometry', postgresql_using='gist')
    op.drop_table('WorldGeometry')
    op.drop_index('idx_uoa_id', table_name='UOA')
    op.drop_table('UOA')
    op.drop_index('idx_topics_id', table_name='Topics')
    op.drop_table('Topics')
    op.drop_index('idx_topic_weights_id', table_name='Topic_weights')
    op.drop_table('Topic_weights')
    op.drop_index('idx_postcodegeom_id', table_name='PostCodeGeom')
    #op.drop_index('idx_PostCodeGeom_geometry', table_name='PostCodeGeom', postgresql_using='gist')
    op.drop_table('PostCodeGeom')
    op.drop_table('Institution')
    op.drop_index('idx_ics_id_ics_id', table_name='ICS')
    op.drop_table('ICS')
    op.drop_index('idx_funder_id', table_name='Funder')
    op.drop_table('Funder')
    op.drop_index('idx_countries_id', table_name='Countries')
    op.drop_table('Countries')
    # ### end Alembic commands ###
